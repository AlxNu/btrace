plugins {
  id 'java'
  id("me.champeau.jmh") version "0.6.8"
}

description 'A JMH benchmark to assert the overhead imposed by various types of BTrace instrumentation.'

configurations {
  btracec
}

dependencies {
  btracec tasks.getByPath(':btrace-dist:clientJar').outputs.getFiles()

  // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
  btracec  (group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.36')

  jmhRuntimeOnly tasks.getByPath(':btrace-dist:agentJar').outputs.getFiles()
  jmhRuntimeOnly tasks.getByPath(':btrace-dist:bootJar').outputs.getFiles()
  jmh project(":btrace-core")
  jmh project(":btrace-instr")
  jmh project(":btrace-runtime")
  jmh project(":btrace-statsd")
  jmh("org.openjdk.jmh:jmh-core:1.36")
  jmh("org.openjdk.jmh:jmh-generator-annprocess:1.36")
}

task btracec(type: JavaExec) {
  javaLauncher = launcher17
  group 'Build'
  inputs.files 'src/main/resources/scripts'
  outputs.dir buildDir.toPath().resolve("classes/java/main")

  environment('BTRACE_HOME', "$projectDir")
  classpath configurations.btracec
  mainClass = "org.openjdk.btrace.compiler.Compiler"
  args '-d'
  args "${buildDir}/classes/java/main/"
  args '-packext'
  args 'btclass'
  args fileTree(dir: "src/jmh/btrace", include: 'TraceScript.java')
}
compileJmhJava.dependsOn btracec

jmhJar {
  include 'META-INF/BenchmarkList'
  include 'META-INF/CompilerHints'
  include 'org/openjdk/jmh/**'
  include 'org/openjdk/btrace/bench/**/*.class'
  include 'org/openjdk/btrace/generated/**/*'
  include "joptsimple/**"
  include "org/apache/**"
  include 'jmh*'
  include 'benchmark/**'
  include '*.btclass'
}

jmh {
  warmupIterations = 5
  iterations = 10
  fork = 2
  jvm = java17.get().toString()
  duplicateClassesStrategy = DuplicatesStrategy.WARN
  def jmhBasedir = project.buildDir.getParentFile().toPath()
  def agentJarPath = tasks.getByPath(':btrace-dist:agentJar').outputs.getFiles().getSingleFile()
  def scriptPath = project.buildDir.toPath().resolve('classes/java/main/TraceScript.btclass')
  def agent = "-javaagent:${agentJarPath}=stdout=true,noServer=true,debug=true,script=\'${scriptPath}\'"
  jvmArgsAppend = ["\"-Djmh.basedir=${jmhBasedir} -Dproject.version=${project.version} -Xmx128m ${agent.toString()}\""]
  resultFormat = 'json'
  resultsFile = file("${project.buildDir}/results/jmh/results.json")
  includes = ['.*BTraceBench.*']
}