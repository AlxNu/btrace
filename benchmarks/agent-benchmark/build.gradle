plugins {
  id 'java'
  alias(libs.plugins.jmh)
}

description 'A JMH benchmark to assert the overhead imposed by various types of BTrace instrumentation.'

configurations {
  btracec
}

dependencies {
  btracec tasks.getByPath(':btrace-dist:clientJar').outputs.getFiles()

  jmh tasks.getByPath(':btrace-dist:agentJar').outputs.getFiles()
  jmh tasks.getByPath(':btrace-dist:bootJar').outputs.getFiles()

  jmh libs.jmh
  jmh libs.jmh.annprocess
}

task btracec(type: JavaExec) {
  javaLauncher = launcher17
  group 'Build'
  inputs.files 'src/main/resources/scripts'
  outputs.dir buildDir.toPath().resolve("classes/java/main")

  environment('BTRACE_HOME', projectDir)
  classpath configurations.btracec
  mainClass = "org.openjdk.btrace.compiler.Compiler"
  args '-d', project.buildDir.toPath().resolve("classes/java/main")
  args '-packext', 'btclass'
  args fileTree(dir: "src/jmh/btrace", include: 'TraceScript.java')
}
compileJmhJava.dependsOn btracec

jmhJar {
  include 'META-INF/BenchmarkList'
  include 'META-INF/CompilerHints'
  include 'org/openjdk/jmh/**'
  include 'org/openjdk/btrace/bench/**/*.class'
  include 'org/openjdk/btrace/generated/**/*'
  include "joptsimple/**"
  include "org/apache/**"
//  include 'jmh*'
  include 'benchmark/**'
  include '*.btclass'
}

jmh {
  warmupIterations = 5
  iterations = 10
  fork = 2
  jvm = java17.get().toString()
  duplicateClassesStrategy = DuplicatesStrategy.WARN
  def jmhBasedir = project.buildDir.getParentFile().toPath()
  def agentJarPath = tasks.getByPath(':btrace-dist:agentJar').outputs.getFiles().getSingleFile()
  def scriptPath = buildDir.toPath().resolve('classes/java/main/TraceScript.btclass')
  def agent = "-javaagent:${pathAgentpathStyle(agentJarPath)}=stdout=true,noServer=true,debug=true,script=${pathAgentpathStyle(scriptPath)}"
  jvmArgsAppend = ["-Djmh.basedir=${pathDoubleQuotedStyle(buildDir.getParentFile())} -Dproject.version=${project.version} -Xmx128m ${agent}"]
  includes = ['.*BTraceBench.*']
}