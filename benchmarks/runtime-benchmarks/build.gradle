plugins {
  id 'java'
  alias(libs.plugins.jmh)
}

description 'A JMH benchmark to assert the overhead imposed by various types of BTrace instrumentation.'

dependencies {
  implementation tasks.getByPath(':btrace-dist:clientJar').outputs.getFiles()

  jmh libs.jmh
  jmh libs.jmh.annprocess
}

task btracec(type: JavaExec) {
  javaLauncher = launcher17
  group 'Build'
  inputs.files 'src/main/resources/scripts'
  outputs.dir buildDir.toPath().resolve("classes/java/main")

  environment('BTRACE_HOME', projectDir)
  classpath configurations.compileClasspath
  mainClass = "org.openjdk.btrace.compiler.Compiler"
  args '-d', buildDir.toPath().resolve("classes/java/main")
  args '-packext', 'btclass'
  args fileTree(dir: "src/jmh/btrace", include: 'TraceScript.java')
}
compileJmhJava.dependsOn btracec

jmhJar {
  include 'META-INF/BenchmarkList'
  include 'META-INF/CompilerHints'
  include 'org/jctools/**/*'
  include 'org/objectweb/asm/**'
  include 'org/openjdk/jmh/**'
  include 'org/openjdk/btrace/bench/**/*.class'
  include "org/openjdk/btrace/core/**"
  include "org/openjdk/btrace/instr/**"
  include 'org/openjdk/btrace/generated/**/*'
  include 'org/openjdk/btrace/runtime/**'
  include 'org/openjdk/btrace/services/**'
  include "joptsimple/**"
  include "org/apache/**"
  include '*.btclass'
  include 'jmh*'
}

jmh {
  jvm = java17.get().toString()
  duplicateClassesStrategy = DuplicatesStrategy.WARN
  jvmArgsAppend = ["-Djmh.basedir=${pathDoubleQuotedStyle(project.buildDir.getParent())}", "-Dproject.version=${project.version}"]
  resultFormat = 'json'
  resultsFile = file(project.buildDir.toPath().resolve("results/jmh/results.json"))
  includes = ['org.openjdk.btrace.bench.ClassFilterBenchmark']
  verbosity = 'EXTRA'
}
